import { transform, mapValues, anyToJSON, anyFromJSON } from '../runtime';
{{#hasImports}}
import {
    {{#imports}}
    {{{.}}},
    {{.}}FromJSON,
    {{.}}ToJSON,
    {{/imports}}
} from './';

{{/hasImports}}
/**
 * {{{description}}}
 * @export
 * @interface {{classname}}
 */
export interface {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#additionalPropertiesType}}
    [key: string]: {{{additionalPropertiesType}}}{{#hasVars}} | any{{/hasVars}};
{{/additionalPropertiesType}}
{{#vars}}
    /**
     * {{{description}}}
     * @type {{=<% %>=}}{<%&datatype%>}<%={{ }}=%>
     * @memberof {{classname}}
     */
    {{#isReadOnly}}readonly {{/isReadOnly}}{{name}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};
{{/vars}}
}

export function {{classname}}FromJSON(json: any): {{classname}} {
    {{#hasVars}}
    return {
        {{#allVars}}
        {{#isPrimitiveType}}
        {{#isDate}}
        '{{name}}': transform(json['{{baseName}}'], {{name}} => new Date({{name}})),
        {{/isDate}}
        {{#isDateTime}}
        '{{name}}': transform(json['{{baseName}}'], {{name}} => new Date({{name}})),
        {{/isDateTime}}
        {{^isDate}}
        {{^isDateTime}}
        '{{name}}': json['{{baseName}}'],
        {{/isDateTime}}
        {{/isDate}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        {{#isContainer}}
        {{#isMapContainer}}
        '{{name}}': transform(json['{{baseName}}'], {{name}} => mapValues({{name}}, {{#items}}{{datatype}}{{/items}}FromJSON)),
        {{/isMapContainer}}
        {{^isMapContainer}}
        '{{name}}': transform(json['{{baseName}}'], {{name}} => {{name}}.map({{#items}}{{datatype}}{{/items}}FromJSON)),
        {{/isMapContainer}}
        {{/isContainer}}
        {{^isContainer}}
        '{{name}}': transform(json['{{baseName}}'], {{datatype}}FromJSON),
        {{/isContainer}}
        {{/isPrimitiveType}}
        {{/allVars}}
    };
    {{/hasVars}}
    {{^hasVars}}
    return json;
    {{/hasVars}}
}

export function {{classname}}ToJSON(value?: {{classname}}): any {
    {{#hasVars}}
    if (value === undefined || value === null) {
        return value;
    }
    return {
        {{#allVars}}
        {{^isReadOnly}}
        {{#isPrimitiveType}}
        {{#isDate}}
        '{{baseName}}': transform(value.{{name}}, {{name}} => {{name}}.toISOString().substr(0, 10)),
        {{/isDate}}
        {{#isDateTime}}
        '{{baseName}}': transform(value.{{name}}, {{name}} => {{name}}.toISOString()),
        {{/isDateTime}}
        {{^isDate}}
        {{^isDateTime}}
        '{{baseName}}': value.{{name}},
        {{/isDateTime}}
        {{/isDate}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        {{#isContainer}}
        {{#isMapContainer}}
        '{{baseName}}': transform(value.{{name}}, {{name}} => mapValues({{name}}, {{#items}}{{datatype}}{{/items}}ToJSON)),
        {{/isMapContainer}}
        {{#isArrayContainer}}
        '{{baseName}}': transform(value.{{name}}, {{name}} => {{name}}.map({{#items}}{{datatype}}{{/items}}ToJSON)),
        {{/isArrayContainer}}
        {{/isContainer}}
        {{^isContainer}}
        '{{baseName}}': transform(value.{{name}}, {{datatype}}ToJSON),
        {{/isContainer}}
        {{/isPrimitiveType}}
        {{/isReadOnly}}
        {{/allVars}}
    };
    {{/hasVars}}
    {{^hasVars}}
    return value;
    {{/hasVars}}
}
{{#hasEnums}}

/**
 * @export
 * @namespace {{classname}}
 */
export namespace {{classname}} {
{{#vars}}
    {{#isEnum}}
    /**
     * @export
     * @enum {string}
     */
    export enum {{enumName}} {
    {{#allowableValues}}
        {{#enumVars}}
        {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
        {{/enumVars}}
    {{/allowableValues}}
    }
    {{/isEnum}}
{{/vars}}
}{{/hasEnums}}
